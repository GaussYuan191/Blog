{"title":"常见的功能函数","slug":"常见的功能函数","date":"2022-02-16","updated":"2022-02-16","comments":true,"path":"api/posts/19005.json","excerpt":"<p></p>","cover":"/gallery/js-2022-2-16.jpeg","covers":["/gallery/js-2022-2-16.jpeg"],"content":"<p><img src=\"/gallery/js-2022-2-16.jpeg\" alt=\"\"></p><a id=\"more\"></a><h1 id=\" 对象扁平化 \"><a class=\"headerlink\"href=\"# 对象扁平化 \"></a>对象扁平化 </h1><p> 主要是通过递归，使嵌套的数据扁平 </p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建判断对象的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isObject</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(obj).slice(<span class=\"number\">8</span>, <span class=\"number\">-1</span>) === <span class=\"string\">'Object'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flatObject</span> (<span class=\"params\">obj, pre = <span class=\"string\">''</span>, res = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!obj) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"built_in\">Reflect</span>.ownKeys(obj).forEach(<span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> perKey = pre + key;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isObject(obj[key])) &#123;</span><br><span class=\"line\">            flatObject(obj[key], perKey + <span class=\"string\">'.'</span>, res);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            res[perKey] = obj[key];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"数组偏平化\"><a class=\"headerlink\" href=\"# 数组偏平化\"></a> 数组偏平化 </h1><p>let arr = [[1, 2, 3],[1,3,[4]],3];</p><p><strong>1.Array.flat</strong></p><p>flat 默认只会拉平一层,Infinity, 全拉平</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.flat(<span class=\"literal\">Infinity</span>) <span class=\"comment\">// [1, 2, 3, 1, 3, 4, 3]</span></span><br></pre></td></tr></table></figure><p><strong>2.reduce</strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> flat_reduce = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\">(<span class=\"params\">pre, cur</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.isArray(cur) ? pre.concat(flat_reduce(cur)) : pre.concat(cur)</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">flat_reduce(arr1)</span><br></pre></td></tr></table></figure><p><strong>3.forEach()</strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> flat_forEach = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ans = [];</span><br><span class=\"line\">  arr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Array</span>.isArray(item) ? ans = ans.concat(flat_forEach(item)) : ans.push(item);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.toString()</strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> flat_toString = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.toString().split(<span class=\"string\">','</span>).map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"built_in\">Number</span>(item))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">flat_toString(arr)</span><br></pre></td></tr></table></figure><p><strong>5.join(),split()</strong></p><p> 和 toString 的方法相同 </p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> flat_join = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.join(<span class=\"string\">','</span>).split(<span class=\"string\">','</span>).map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"built_in\">Number</span>(item))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">flat_join(arr)</span><br></pre></td></tr></table></figure><p><strong>6. 拓展运算符</strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> flat_ = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断数组中是否包含对象 some</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (arr.some(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"built_in\">Array</span>.isArray(item))) &#123;</span><br><span class=\"line\">    arr = [].concat(...arr)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">flat_(arr)</span><br></pre></td></tr></table></figure><h1 id=\"扁平化数据结构转 Tree\"><a class=\"headerlink\" href=\"# 扁平化数据结构转 Tree\"></a> 扁平化数据结构转 Tree</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"部门 1\"</span>, <span class=\"attr\">pid</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"部门 2\"</span>, <span class=\"attr\">pid</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"部门 3\"</span>, <span class=\"attr\">pid</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">4</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"部门 4\"</span>, <span class=\"attr\">pid</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"number\">5</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"部门 5\"</span>, <span class=\"attr\">pid</span>: <span class=\"number\">4</span> &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure><p><strong>1. 递归 </strong></p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function arrayToTree(arr, pid) &#123;</span><br><span class=\"line\">  let result &#x3D; [];</span><br><span class=\"line\">  getChildren(arr, result, pid);</span><br><span class=\"line\">  return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const getChildren &#x3D; (data, result, pid) &#x3D;&gt; &#123;</span><br><span class=\"line\">  data.forEach(item &#x3D;&gt; &#123;</span><br><span class=\"line\">    if (item.pid &#x3D;&#x3D;&#x3D; pid) &#123;</span><br><span class=\"line\">      let newItem &#x3D; &#123;...item, children:[]&#125;;</span><br><span class=\"line\">      result.push(newItem);</span><br><span class=\"line\">      &#x2F;&#x2F; 递归</span><br><span class=\"line\">      getChildren(data, newItem.children, item.pid)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><p><strong>2. 迭代</strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arrayToTree</span>(<span class=\"params\">arr, pid</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 先把数据变成 map 格式</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">  arr.forEach(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newNode = &#123; ...item, <span class=\"attr\">children</span>: [] &#125;;</span><br><span class=\"line\">    map.set(item.id, newNode);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = [];</span><br><span class=\"line\">  arr.forEach(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> id = item.id;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> itemPid = item.pid;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> treeItem = map.get(id);</span><br><span class=\"line\">    <span class=\"comment\">// 找到根节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (itemPid === pid) &#123;</span><br><span class=\"line\">      res.push(treeItem);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      map.get(itemPid).children.push(treeItem);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h1 id=\"数组去重\"><a class=\"headerlink\" href=\"# 数组去重\"></a> 数组去重 </h1><p>let arr = [1, 2, 3, 3, 2, 4, 2, 7, 5, 9];</p><p><strong>1.Set</strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> deDuplication_set = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><p><strong>2. 利用对象</strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> deDuplication_object = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = [];</span><br><span class=\"line\">  arr.forEach(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!obj[item]) &#123;</span><br><span class=\"line\">      res.push(item);</span><br><span class=\"line\">      obj[item] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><p><strong>3. 利用 map</strong></p><p> 如果 map 中不存在，就放在 map 中，最后取 map 的 keys</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> deDuplication_map = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">  arr.forEach(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!map.has(item)) &#123;</span><br><span class=\"line\">      map.set(item, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(map.keys());</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><p><strong>4.filter indexOf</strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> deDuplication_filter = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.filter(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.indexOf(item) == index;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><p><strong>5. 新建数组 + sort</strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> deDuplication_sort = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  arr.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = [arr[<span class=\"number\">0</span>]];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[i] !== arr[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">      res.push(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><p><strong>6.reduce + includes</strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> deDuplication_reduce = <span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\">(<span class=\"params\">pre, cur</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre.includes(cur) === <span class=\"number\">-1</span> ? [...pre, cur] : pre;</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","url":"/posts/19005/","min2read":3,"word4post":690,"prev_post":null,"next_post":{"title":"Reflect 对象解析","url":"/posts/60673/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\" 对象扁平化 \" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">对象扁平化 </span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"数组偏平化\" href = \"#\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\"> 数组偏平化 </span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"扁平化数据结构转 Tree\" href = \"#\"><span class=\"toc-number\">3.</span> <span class=\"toc-text\"> 扁平化数据结构转 Tree</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"数组去重\" href = \"#\"><span class=\"toc-number\">4.</span> <span class=\"toc-text\"> 数组去重 </span></a></li></ol>","categories":[{"name":"功能函数","path":"api/categories/功能函数.json","url":"/categories/功能函数/"}],"tags":[{"name":"js","path":"api/tags/js.json","url":"/tags/js/"}]}